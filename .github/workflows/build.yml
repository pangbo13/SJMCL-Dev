name: Build Artifacts
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
      upload_artifacts:
        description: 'Whether to upload artifacts'
        required: false
        type: boolean
        default: true
      branch:
        description: 'Git branch to checkout'
        required: false
        type: string
        default: 'main'
    secrets:
      SJMCL_CURSEFORGE_API_KEY:
        required: true

jobs:
  Build-and-Release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64
          - os: windows-latest
            target: i686-pc-windows-msvc
            platform: windows
            arch: i686
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
            platform: windows
            arch: aarch64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: x86_64
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x86_64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # See https://github.com/tauri-apps/tauri-action
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          # targets: ${{ matrix.platform == 'macos' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}


      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # Additional dependencies for RPM building
          sudo apt-get install -y rpm

      - name: Install frontend dependencies
        run: |
          npm install -g pnpm
          pnpm import
          pnpm install

      - name: Remove Font files (MacOS)
        if: matrix.platform == 'macos'
        run: |
          rm -r public/fonts/Sinter/
          rm src/styles/fonts.css
          touch src/styles/fonts.css
      
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          key: ${{ matrix.platform }}-${{ matrix.target }}

      - name: Build the app (MacOS)
        if: matrix.platform == 'macos'
        run: pnpm run tauri build --bundles app --target ${{ matrix.target }}
        env:
          SJMCL_CURSEFORGE_API_KEY: ${{ secrets.SJMCL_CURSEFORGE_API_KEY }}

      - name: Build the app
        if: matrix.platform != 'macos'
        run: pnpm run tauri build --target ${{ matrix.target }}
        env:
          SJMCL_CURSEFORGE_API_KEY: ${{ secrets.SJMCL_CURSEFORGE_API_KEY }}

      - name: Prepare release artifact
        shell: bash
        env:
          VERSION: ${{ inputs.version }}
        run: |
          ARTIFACT_NAME="SJMCL_${{ env.VERSION }}_${{ matrix.platform }}_${{ matrix.arch }}"
          echo "Artifact Name: $ARTIFACT_NAME"
          mkdir artifacts
          if [ "${{ matrix.platform }}" = "windows" ]; then
            python scripts/release/bundle_portable_assets.py -p "src-tauri/target/${{ matrix.target }}/release/" "SJMCL.exe"
            # For Windows, copy the portable exe
            mv "src-tauri/target/${{ matrix.target }}/release/SJMCL-patched.exe" artifacts/"$ARTIFACT_NAME"_portable.exe
            mv "src-tauri/target/${{ matrix.target }}/release/bundle/msi/"*.msi artifacts/"$ARTIFACT_NAME".msi
            ls -la artifacts
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            ls src-tauri/target/${{ matrix.target }}/release/bundle/macos
            # For MacOS, compress the .app folder
            tar -cvzf artifacts/"$ARTIFACT_NAME".app.tar.gz -C "src-tauri/target/${{ matrix.target }}/release/bundle/macos" "SJMCL.app"
            ls -la artifacts
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            python scripts/release/bundle_portable_assets.py -p "src-tauri/target/${{ matrix.target }}/release/" "SJMCL"
            mv "src-tauri/target/${{ matrix.target }}/release/bundle/appimage/"*.AppImage artifacts/"$ARTIFACT_NAME".AppImage
            mv "src-tauri/target/${{ matrix.target }}/release/bundle/deb/"*.deb artifacts/"$ARTIFACT_NAME".deb
            mv "src-tauri/target/${{ matrix.target }}/release/bundle/rpm/"*.rpm artifacts/"$ARTIFACT_NAME".rpm
            mv "src-tauri/target/${{ matrix.target }}/release/SJMCL-patched" artifacts/"$ARTIFACT_NAME"_portable
            ls -la artifacts
          fi
          
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        if: inputs.upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: "artifacts/*"
          if-no-files-found: error 
