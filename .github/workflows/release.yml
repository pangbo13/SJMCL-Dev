# Manually build and release artifacts instead of using tauri-actions
# Reasons:
# 1. Include OS name in output filenames (tauri-actions doesn't support this)
# 2. Publish portable .exe for Windows (unsupported by tauri-actions either)
name: Release

on:
    push:
        tags:
            - 'v*'
    workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Version-Check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Check version consistency
        run: npm run version check

      - name: Check Tag Version
        id: check-tag
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PKG_VERSION"
          
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            TAG_VERSION=${TAG_VERSION#v}
            
            if [[ "$TAG_VERSION" != "$PKG_VERSION" ]]; then
              echo "❌ Git tag version ($TAG_VERSION) does not match package version ($PKG_VERSION)"
              exit 1
            fi
            echo "✅ Git tag version matches package version: $TAG_VERSION"
          else
            COMMIT_HASH=$(git rev-parse HEAD)
            COMMIT_HASH=${COMMIT_HASH:0:6}
            PKG_VERSION="$PKG_VERSION"-"$COMMIT_HASH"
            echo "Not a tag, using package version with commit hash: $PKG_VERSION"
          fi
          
          # Set the version as output
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT

  Build-and-Release:
    needs: [Version-Check]
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.Version-Check.outputs.version }}
      upload_artifacts: true
    secrets:
      SJMCL_MICROSOFT_CLIENT_SECRET: ${{ secrets.SJMCL_MICROSOFT_CLIENT_SECRET }}
      SJMCL_CURSEFORGE_API_KEY: ${{ secrets.SJMCL_CURSEFORGE_API_KEY }}

  Code-Sign-macOS:
    needs: [Version-Check, Build-and-Release]
    uses: ./.github/workflows/sign-macos.yml
    with:
      version: ${{ needs.Version-Check.outputs.version }}
    secrets:
      MACOS_CERT_P12_BASE64: ${{ secrets.MACOS_CERT_P12_BASE64 }}
      MACOS_CERT_P12_PASSWORD: ${{ secrets.MACOS_CERT_P12_PASSWORD }}
      MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
      MACOS_NOTARY_APPLE_ID: ${{ secrets.MACOS_NOTARY_APPLE_ID }}
      MACOS_NOTARY_PASSWORD: ${{ secrets.MACOS_NOTARY_PASSWORD }}
      MACOS_NOTARY_TEAM_ID: ${{ secrets.MACOS_NOTARY_TEAM_ID }}

  Create-Release:
    needs: [Version-Check, Build-and-Release, Code-Sign-macOS]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download non-macOS artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: 'SJMCL_${{ needs.Version-Check.outputs.version }}_*'
          path: artifacts
          merge-multiple: true

      - name: Download signed macOS artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: 'SJMCL_${{ needs.Version-Check.outputs.version }}_macos_*_signed'
          path: artifacts-signed
          merge-multiple: true

      - name: Organize release artifacts
        env:
          VERSION: ${{ needs.Version-Check.outputs.version }}
        run: |
          mkdir -p release-artifacts
          
          # Copy non-macOS artifacts
          find artifacts -name "SJMCL_${{ env.VERSION }}_windows_*" -exec cp {} release-artifacts/ \;
          find artifacts -name "SJMCL_${{ env.VERSION }}_linux_*" -exec cp {} release-artifacts/ \;
          
          # Copy signed macOS artifacts (rename to remove _signed suffix)
          find artifacts-signed -name "SJMCL_${{ env.VERSION }}_macos_*" -type f | while read file; do
            basename=$(basename "$file")
            # Remove _signed suffix before the file extension
            newname=$(echo "$basename" | sed 's/_signed\./\./')
            cp "$file" "release-artifacts/$newname"
          done
          
          echo "Final release artifacts:"
          ls -la release-artifacts/

      - name: Generate Changelog
        id: changelog
        run: |
          pnpm conventional-changelog -p angular -u -r 2 > release-notes.md
          cat release-notes.md
        shell: bash

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.Version-Check.outputs.version }}
        run: |
          RELEASE_TAG="${{ env.VERSION }}"
          
          # Create the release
          gh release create "$GITHUB_REF_NAME" \
            --title "SJMCL ${{ env.VERSION }}" \
            --draft \
            $PRERELEASE \
            --notes-file release-notes.md \
            ./release-artifacts/*
